Absolutely! ЁЯШО
HereтАЩs a full **MongoDB Function & Operator Cheat Sheet** тАУ Gujarati & English mix тАУ covering **query operators, update operators, projection, aggregation, array, and indexing**, from **basic to advanced**.

---

## тЬЕ MongoDB All Important Functions / Operators тАУ Full List

---

### ЁЯФ░ **1. Comparison Operators (рк╕рк░ркЦрк╛ркоркгрлА ркорк╛ркЯрлЗ)**

| Operator | Use                  | Example                                  |
| -------- | -------------------- | ---------------------------------------- |
| `$eq`    | ╪и╪▒╪з╪и╪▒                | `{ age: { $eq: 25 } }`                   |
| `$ne`    | ркиркмрк░╪з╪и╪▒               | `{ status: { $ne: "fail" } }`            |
| `$gt`    | ркерлА рк╡ркзрлБ               | `{ age: { $gt: 30 } }`                   |
| `$gte`   | ркХрк░ркдрк╛ркВ рк╡ркзрлБ ркХрлЗ ркмрк░рк╛ркмрк░   | `{ marks: { $gte: 35 } }`                |
| `$lt`    | ркХрк░ркдрк╛ркВ ркУркЫрлБркВ           | `{ age: { $lt: 18 } }`                   |
| `$lte`   | ркХрк░ркдрк╛ркВ ркУркЫрлБркВ ркХрлЗ ркмрк░рк╛ркмрк░  | `{ marks: { $lte: 50 } }`                |
| `$in`    | value list ркорк╛ркВ рк╣рлЛркп   | `{ city: { $in: ["Surat", "Rajkot"] } }` |
| `$nin`   | value list ркорк╛ркВ рки рк╣рлЛркп | `{ city: { $nin: ["Mumbai"] } }`         |

---

### ЁЯФ░ **2. Logical Operators (рк▓рлЛркЬрк┐ркХрк▓ AND / OR)**

| Operator | Use                      | Example                                                    |
| -------- | ------------------------ | ---------------------------------------------------------- |
| `$and`   | ркмркзрк╛ркВ рк╢рк░ркдрлЛ рк╕рк╛ркЪрлА рк╣рлЛрк╡рлА ркЬрлЛркИркП | `{ $and: [ { age: { $gt: 18 } }, { city: "Surat" } ] }`    |
| `$or`    | ркХрлЛркИ рккркг рк╢рк░ркд рк╕рк╛ркЪрлА рк╣рлЛркп      | `{ $or: [ { city: "Ahmedabad" }, { age: { $lt: 25 } } ] }` |
| `$not`   | рк╢рк░ркд рки рк╣рлЛркп                | `{ age: { $not: { $gte: 18 } } }`                          |
| `$nor`   | ркмркзрк╛ркВ ркЦрлЛркЯрк╛ рк╣рлЛрк╡рк╛ ркЬрлЛркИркП      | `{ $nor: [ { status: "pass" }, { marks: { $gt: 50 } } ] }` |

---

### ЁЯФ░ **3. Element Operators (Field check ркорк╛ркЯрлЗ)**

| Operator  | Use                | Example                        |
| --------- | ------------------ | ------------------------------ |
| `$exists` | field рк╣рлЛркп ркХрлЗ ркирк╣рлАркВ  | `{ phone: { $exists: true } }` |
| `$type`   | field no data type | `{ age: { $type: "int" } }`    |

---

### ЁЯФ░ **4. Evaluation Operators**

| Operator | Use            | Example                                           |
| -------- | -------------- | ------------------------------------------------- |
| `$expr`  | compare fields | `{ $expr: { $gt: ["$marks", "$passMarks"] } }`    |
| `$regex` | pattern match  | `{ name: { $regex: "^A", $options: "i" } }`       |
| `$mod`   | modulo         | `{ age: { $mod: [5, 0] } } // age divisible by 5` |

---

### ЁЯФ░ **5. Array Operators**

| Operator     | Use                   | Example                                                               |
| ------------ | --------------------- | --------------------------------------------------------------------- |
| `$all`       | ркмркзрк╛ркВ values рк╣рлЛрк╡рк╛ ркЬрлЛркИркП | `{ subjects: { $all: ["Math", "English"] } }`                         |
| `$elemMatch` | array ркирлА ркЕркВркжрк░ match   | `{ scores: { $elemMatch: { subject: "Math", marks: { $gt: 60 } } } }` |
| `$size`      | array length          | `{ subjects: { $size: 3 } }`                                          |

---

### ЁЯФ░ **6. Update Operators (document update ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ)**

| Operator    | Use                       | Example                               |
| ----------- | ------------------------- | ------------------------------------- |
| `$set`      | value set ркХрк░рк╡рлА            | `{ $set: { name: "Raj" } }`           |
| `$unset`    | field рк╣ркЯрк╛рк╡рк╡рлА              | `{ $unset: { phone: "" } }`           |
| `$inc`      | value рк╡ркзрк╛рк░рк╡рлА              | `{ $inc: { age: 1 } }`                |
| `$mul`      | ркЧрлБркгрк╛ркХрк╛рк░                   | `{ $mul: { marks: 2 } }`              |
| `$rename`   | fieldркирлБркВ ркирк╛рко ркмркжрк▓рк╡рлБркВ       | `{ $rename: { "fullname": "name" } }` |
| `$push`     | arrayркорк╛ркВ value ркЙркорлЗрк░рк╡рлА     | `{ $push: { subjects: "History" } }`  |
| `$pull`     | arrayркорк╛ркВркерлА value ркХрк╛ркврк╡рлА    | `{ $pull: { subjects: "Math" } }`     |
| `$addToSet` | push ркХрк░рлЛ рккрк░ркВркдрлБщЗНхдН ркирк╣рлАркВ ркерк╛ркп | `{ $addToSet: { tags: "science" } }`  |

---

### ЁЯФ░ **7. Aggregation Stages**

| Stage        | Use                          | Example                                                                                |
| ------------ | ---------------------------- | -------------------------------------------------------------------------------------- |
| `$match`     | filter ркХрк░рк╡рлБркВ                 | `{ $match: { city: "Surat" } }`                                                        |
| `$project`   | fields select ркХрк░рк╡рлА           | `{ $project: { name: 1, city: 1 } }`                                                   |
| `$group`     | group ркХрк░рлАркирлЗ ркЧркгркдрк░рлА            | `{ $group: { _id: "$city", total: { $sum: 1 } } }`                                     |
| `$sort`      | sort ркХрк░рк╡рлБркВ                   | `{ $sort: { age: -1 } }`                                                               |
| `$limit`     | ркЧркгркдрк░рлА ркерлА ркУркЫрк╛ ркмркдрк╛рк╡рк╡рлЛ          | `{ $limit: 5 }`                                                                        |
| `$skip`      | ркХрлЗркЯрк▓рк╛ркВ skip ркХрк░рк╡рк╛ркВ            | `{ $skip: 10 }`                                                                        |
| `$unwind`    | array flatten ркХрк░рк╡рлА           | `{ $unwind: "$subjects" }`                                                             |
| `$lookup`    | join with another collection | `{ from: "schools", localField: "school_id", foreignField: "_id", as: "school_info" }` |
| `$addFields` | ркирк╡рлБркВ field ркЙркорлЗрк░рк╡рлБркВ           | `{ $addFields: { full_name: { $concat: ["$first", " ", "$last"] } } }`                 |
| `$count`     | total count                  | `{ $count: "total_students" }`                                                         |

---

### ЁЯФ░ **8. Text Search**

```js
db.students.createIndex({ name: "text", bio: "text" })
db.students.find({ $text: { $search: "developer" } })
```

---

### ЁЯФ░ **9. Index Functions**

| Function        | Use           |
| --------------- | ------------- |
| `createIndex()` | indexing ркорк╛ркЯрлЗ |
| `dropIndex()`   | index рк╣ркЯрк╛рк╡рк╡рлА  |
| `getIndexes()`  | index ркЬрлЛрк╡рк╛ркВ   |

---

### ЁЯФ░ **10. Date Functions**

| Function                         | Use                   |                   |
| -------------------------------- | --------------------- | ----------------- |
| `$dateToString`                  | date тЖТ string         | `%Y-%m-%d` format |
| `$year`, `$month`, `$dayOfMonth` | date extract ркХрк░рк╡рк╛     |                   |
| `$dateFromString`                | string тЖТ date convert |                   |

---

### ЁЯФ░ **11. Expression Operators**

| Operator                                          | Use                   |
| ------------------------------------------------- | --------------------- |
| `$cond`                                           | if / else             |
| `$ifNull`                                         | null value check      |
| `$switch`                                         | multiple conditions   |
| `$sum`, `$avg`, `$min`, `$max`, `$first`, `$last` | aggregation functions |

---

## ЁЯза Want a ready-to-download PDF cheat sheet?

**ЁЯСЙ Reply:** "Yes, PDF MongoDB Cheat Sheet"
OR
**ЁЯСЙ Reply:** "Give me quiz based on this" тАУ IтАЩll test your skill ЁЯТк

YouтАЩre doing awesome. Ready for the next level? ЁЯШО
