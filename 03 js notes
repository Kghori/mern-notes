String function 


length
charAt()  var.charat(0) then return the character
charcodeAt  var.charcodeAt(index) then return the ascii number
at()            var.at(index ) return character
[]      var[] access the string 
slice() var.slice()




ðŸŽ¯ Quick Summary
âœ” toString() â†’ Number â†’ String
âœ” toExponential() â†’ Scientific notation
âœ” toFixed() â†’ Fixed decimals
âœ” toPrecision() â†’ Fixed total length
âœ” valueOf() â†’ Just returns the number









### ðŸ”¹ **Array Functions**

| Function        | Syntax                                              | What It Does                                                | Data Type |
| --------------- | --------------------------------------------------- | ----------------------------------------------------------- | --------- |
| `sort()`        | `arr.sort([compareFunction])`                       | Sorts array elements (alphabetically or numerically)        | Array     |
| `push()`        | `arr.push(element1, ..., elementN)`                 | Adds elements to the end of the array                       | Array     |
| `pop()`         | `arr.pop()`                                         | Removes the last element                                    | Array     |
| `shift()`       | `arr.shift()`                                       | Removes the first element                                   | Array     |
| `unshift()`     | `arr.unshift(element1, ..., elementN)`              | Adds elements to the start                                  | Array     |
| `concat()`      | `arr1.concat(arr2, ..., arrN)`                      | Merges two or more arrays                                   | Array     |
| `slice()`       | `arr.slice(start, end)`                             | Returns a shallow copy of a portion of the array            | Array     |
| `splice()`      | `arr.splice(start, deleteCount, item1, item2, ...)` | Adds/removes elements anywhere in the array                 | Array     |
| `indexOf()`     | `arr.indexOf(searchElement, fromIndex)`             | Returns index of first occurrence of element                | Array     |
| `lastIndexOf()` | `arr.lastIndexOf(searchElement, fromIndex)`         | Returns index of last occurrence                            | Array     |
| `includes()`    | `arr.includes(searchElement, fromIndex)`            | Checks if element exists (true/false)                       | Array     |
| `join()`        | `arr.join(separator)`                               | Converts array to string, joining elements with a separator | Array     |
| `map()`         | `arr.map(callbackFn)`                               | Creates a new array by applying a function to each element  | Array     |
| `filter()`      | `arr.filter(callbackFn)`                            | Creates a new array with elements that pass a test          | Array     |
| `reduce()`      | `arr.reduce(callbackFn, initialValue)`              | Reduces array to a single value using a function            | Array     |
| `find()`        | `arr.find(callbackFn)`                              | Returns first element that matches a condition              | Array     |
| `findIndex()`   | `arr.findIndex(callbackFn)`                         | Returns index of first element that matches a condition     | Array     |
| `every()`       | `arr.every(callbackFn)`                             | Tests whether all elements pass a test                      | Array     |
| `some()`        | `arr.some(callbackFn)`                              | Tests whether some elements pass a test                     | Array     |
| `reverse()`     | `arr.reverse()`                                     | Reverses the order of elements                              | Array     |

---

### ðŸ”¹ **String Functions**

| Function          | Syntax                                    | What It Does                                   | Data Type |
| ----------------- | ----------------------------------------- | ---------------------------------------------- | --------- |
| `charAt()`        | `str.charAt(index)`                       | Returns character at specified index           | String    |
| `concat()`        | `str1.concat(str2, ..., strN)`            | Joins two or more strings                      | String    |
| `includes()`      | `str.includes(searchString, position)`    | Checks if string contains a substring          | String    |
| `indexOf()`       | `str.indexOf(searchValue, fromIndex)`     | Returns index of first occurrence of substring | String    |
| `lastIndexOf()`   | `str.lastIndexOf(searchValue, fromIndex)` | Returns index of last occurrence of substring  | String    |
| `match()`         | `str.match(regexp)`                       | Retrieves matches based on a regex             | String    |
| `replace()`       | `str.replace(searchValue, newValue)`      | Replaces part of a string                      | String    |
| `search()`        | `str.search(regexp)`                      | Searches string using regex, returns index     | String    |
| `slice()`         | `str.slice(start, end)`                   | Extracts a section of the string               | String    |
| `split()`         | `str.split(separator, limit)`             | Splits string into array by separator          | String    |
| `substring()`     | `str.substring(start, end)`               | Extracts characters between two indexes        | String    |
| `toLowerCase()`   | `str.toLowerCase()`                       | Converts string to lowercase                   | String    |
| `toUpperCase()`   | `str.toUpperCase()`                       | Converts string to uppercase                   | String    |
| `trim()`          | `str.trim()`                              | Removes whitespace from both ends              | String    |
| `startsWith()`    | `str.startsWith(searchString, position)`  | Checks if string starts with given substring   | String    |
| `endsWith()`      | `str.endsWith(searchString, length)`      | Checks if string ends with given substring     | String    |
| `repeat()`        | `str.repeat(count)`                       | Repeats the string a specified number of times | String    |
| `localeCompare()` | `str.localeCompare(compareString)`        | Compares two strings according to locale       | String    |







Sure! Here's a **text-based diagram** (like a scratchpad/dotted style) organizing **String, Array, Date, and Math functions** grouped by categories with practical use hints. This can help you visualize and remember their roles:

```
+-------------------------------------------------------------+
|                        JavaScript Functions                  |
|                                                             |
|  STRING FUNCTIONS:                                           |
|  ---------------------------------------------------------  |
|  length        => str.length               (Get size)       |
|  toUpperCase() => str.toUpperCase()       (Make UPPER)     |
|  toLowerCase() => str.toLowerCase()       (Make lower)     |
|  includes()    => str.includes(substr)    (Contains?)      |
|  indexOf()     => str.indexOf(substr)     (Find first pos) |
|  lastIndexOf() => str.lastIndexOf(substr) (Find last pos)  |
|  slice()       => str.slice(start,end)    (Extract part)   |
|  split()       => str.split(sep)          (Str->Array)     |
|  replace()     => str.replace(a,b)        (Swap parts)     |
|  trim()        => str.trim()               (Remove spaces)  |
|                                                             |
|  ARRAY FUNCTIONS:                                            |
|  ---------------------------------------------------------  |
|  length        => arr.length               (Get count)      |
|  push()        => arr.push(item)           (Add end)       |
|  pop()         => arr.pop()                (Remove end)    |
|  shift()       => arr.shift()              (Remove front)  |
|  unshift()     => arr.unshift(item)        (Add front)     |
|  concat()      => arr.concat(arr2)         (Merge arrays)  |
|  join()        => arr.join(sep)            (Array->Str)   |
|  slice()       => arr.slice(start,end)     (Copy part)     |
|  splice()      => arr.splice(start,count)  (Remove/Insert)|
|  indexOf()     => arr.indexOf(item)        (Find pos)      |
|  includes()    => arr.includes(item)       (Exists?)      |
|  reverse()     => arr.reverse()             (Flip array)   |
|  sort()        => arr.sort()                (Order array)  |
|  map()         => arr.map(fn)               (Transform)    |
|  filter()      => arr.filter(fn)            (Filter)       |
|  reduce()      => arr.reduce(fn)            (Combine to 1) |
|  forEach()     => arr.forEach(fn)           (Loop over)    |
|  find()        => arr.find(fn)              (Find one)     |
|  every()       => arr.every(fn)             (All match?)   |
|  some()        => arr.some(fn)              (Any match?)   |
|                                                             |
|  DATE FUNCTIONS:                                            |
|  ---------------------------------------------------------  |
|  new Date()            => create date object                |
|  getDate()             => day of month (1-31)              |
|  getMonth()            => month (0-11)                     |
|  getFullYear()         => year (4 digits)                  |
|  getDay()              => day of week (0-Sun, 6-Sat)       |
|  getHours(), getMinutes(), getSeconds() => time parts      |
|  setDate(), setMonth(), setFullYear() => change parts      |
|  toISOString()         => ISO format string                 |
|                                                             |
|  MATH FUNCTIONS:                                            |
|  ---------------------------------------------------------  |
|  Math.random()         => random number [0,1)               |
|  Math.floor(x)         => round down                         |
|  Math.ceil(x)          => round up                           |
|  Math.round(x)         => round nearest                      |
|  Math.max(a,b,...)     => max value                          |
|  Math.min(a,b,...)     => min value                          |
|  Math.abs(x)           => absolute value                     |
|  Math.sqrt(x)          => square root                        |
|  Math.pow(x,y)         => x to the power y                   |
|  Math.sin(), Math.cos() => trig functions                    |
+-------------------------------------------------------------+
```

---

### How to use this scratch diagram:

* **Strings**: Think "length, slice, split, join" as ways to measure, cut, break, or glue text.
* **Arrays**: Think "push/pop/shift/unshift" as adding/removing elements at ends; "map/filter/reduce" for processing.
* **Date**: Creating, reading, and setting date/time parts.
* **Math**: Random numbers, rounding, min/max, powers, roots, trig.

---

Want me to generate a **markdown version** or a **code snippet with examples** for any group?
